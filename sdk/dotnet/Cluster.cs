// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsQuickStartRedshift
{
    [AwsQuickStartRedshiftResourceType("aws-quickstart-redshift:index:Cluster")]
    public partial class Cluster : Pulumi.ComponentResource
    {
        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, ComponentResourceOptions? options = null)
            : base("aws-quickstart-redshift:index:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        [Input("additionalSecurityGroupID")]
        private InputList<string>? _additionalSecurityGroupID;

        /// <summary>
        /// An additional list of security group IDs to attach to the redshift cluster
        /// </summary>
        public InputList<string> AdditionalSecurityGroupID
        {
            get => _additionalSecurityGroupID ?? (_additionalSecurityGroupID = new InputList<string>());
            set => _additionalSecurityGroupID = value;
        }

        /// <summary>
        /// The identifier of the Redshift Cluster. Must contain
        /// only lowercase, alphanumeric characters and hyphens.
        /// </summary>
        [Input("dbClusterIdentifier", required: true)]
        public string DbClusterIdentifier { get; set; } = null!;

        /// <summary>
        /// The maintenance window for the Redshift cluster. e.g 'sat:05:00-sat:05:30'
        /// </summary>
        [Input("dbMaintenanceWindow")]
        public string? DbMaintenanceWindow { get; set; }

        [Input("dbMasterPassword", required: true)]
        private Input<string>? _dbMasterPassword;

        /// <summary>
        /// The password that is associated with the master user account
        /// for the cluster that is being created. Must have at least 8
        /// characters and no more than 64 characters, and must include 1
        /// uppercase letter, 1 lowercase letter, 1 number, and 1 symbol
        /// (excluding / @ \" ').
        /// </summary>
        public Input<string>? DbMasterPassword
        {
            get => _dbMasterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dbMasterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The user name that is associated with the master user account
        /// for the cluster that is being created.
        /// </summary>
        [Input("dbMasterUsername", required: true)]
        public string DbMasterUsername { get; set; } = null!;

        /// <summary>
        /// The name of the first database to be created when the cluster
        /// is created.
        /// </summary>
        [Input("dbName", required: true)]
        public string DbName { get; set; } = null!;

        /// <summary>
        /// The type of node to be provisioned
        /// </summary>
        [Input("dbNodeType", required: true)]
        public string DbNodeType { get; set; } = null!;

        /// <summary>
        /// The port number on which the cluster accepts incoming
        /// connections. Default is 8200
        /// </summary>
        [Input("dbPort")]
        public int? DbPort { get; set; }

        /// <summary>
        /// Set this parameter to `false` if you want to disable Amazon
        /// Redshift Cluster and Instance level event subscriptions. You
        /// might want to disable it if you are testing or running
        /// continuous integration (CI) processes. Default is `true`.
        /// </summary>
        [Input("enableEventSubscription")]
        public bool? EnableEventSubscription { get; set; }

        /// <summary>
        /// Enables or disables logging to an S3 bucket. To enable logging,
        /// select True.
        /// </summary>
        [Input("enableLogging")]
        public bool? EnableLogging { get; set; }

        /// <summary>
        /// The name of your Glue Data Catalog database.
        /// </summary>
        [Input("glueCatalogDatabaseName")]
        public string? GlueCatalogDatabaseName { get; set; }

        /// <summary>
        /// The maximum number of concurrency scaling Redshift
        /// clusters.
        /// </summary>
        [Input("maxConcurrentCluster")]
        public double? MaxConcurrentCluster { get; set; }

        /// <summary>
        /// The email notification list that is used to configure an SNS
        /// topic for sending CloudWatch alarm and event notifications.
        /// </summary>
        [Input("notificationEmail")]
        public string? NotificationEmail { get; set; }

        /// <summary>
        /// The number of compute nodes in the cluster. For multi-node
        /// clusters, the NumberOfNodes parameter must be greater than
        /// 1.
        /// </summary>
        [Input("numDbNodes")]
        public int? NumDbNodes { get; set; }

        /// <summary>
        /// Specifies whether Amazon Redshift will be publicly accessible.
        /// If this option is set to True, the Amazon Redshift cluster will
        /// be created in a public subnet with security group whitelisting
        /// to RemoteAccessCIDR.
        /// If you leave the default option of False, the Amazon Redshift
        /// cluster will be created in a private subnet with security group
        /// whitelisting to VPCCIDR.
        /// </summary>
        [Input("publiclyAccessible")]
        public bool? PubliclyAccessible { get; set; }

        /// <summary>
        /// Name for an S3 bucket for logging. An IAM role will be created and
        /// associated to the Redshift cluster with GET and LIST access to
        /// this bucket.
        /// </summary>
        [Input("redshiftLoggingS3BucketName")]
        public string? RedshiftLoggingS3BucketName { get; set; }

        [Input("subnetIDs", required: true)]
        private InputList<string>? _subnetIDs;

        /// <summary>
        /// The list of subnet IDs in which to deploy the Redshift Cluster
        /// </summary>
        public InputList<string> SubnetIDs
        {
            get => _subnetIDs ?? (_subnetIDs = new InputList<string>());
            set => _subnetIDs = value;
        }

        /// <summary>
        /// The VPC with which to create the Redshift Cluster
        /// </summary>
        [Input("vpcID", required: true)]
        public Input<string> VpcID { get; set; } = null!;

        public ClusterArgs()
        {
        }
    }
}
