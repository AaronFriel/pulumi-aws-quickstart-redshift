// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbMasterPassword == nil {
		return nil, errors.New("invalid value for required argument 'DbMasterPassword'")
	}
	if args.SubnetIDs == nil {
		return nil, errors.New("invalid value for required argument 'SubnetIDs'")
	}
	if args.VpcID == nil {
		return nil, errors.New("invalid value for required argument 'VpcID'")
	}
	var resource Cluster
	err := ctx.RegisterRemoteComponentResource("aws-quickstart-redshift:index:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type clusterArgs struct {
	// Allowed CIDR block in the format x.x.x.x/x for external SSH
	// access to the cluster.
	DbAccessCidrBlock string `pulumi:"dbAccessCidrBlock"`
	// The maintenance window for the Redshift cluster. e.g 'sat:05:00-sat:05:30'
	DbMaintenanceWindow *string `pulumi:"dbMaintenanceWindow"`
	// The password that is associated with the master user account
	// for the cluster that is being created. Must have at least 8
	// characters and no more than 64 characters, and must include 1
	// uppercase letter, 1 lowercase letter, 1 number, and 1 symbol
	// (excluding / @ \" ').
	DbMasterPassword string `pulumi:"dbMasterPassword"`
	// The user name that is associated with the master user account
	// for the cluster that is being created.
	DbMasterUsername string `pulumi:"dbMasterUsername"`
	// The name of the first database to be created when the cluster
	// is created.
	DbName string `pulumi:"dbName"`
	// The type of node to be provisioned
	DbNodeType string `pulumi:"dbNodeType"`
	// The port number on which the cluster accepts incoming
	// connections. Default is 8200
	DbPort *int `pulumi:"dbPort"`
	// Enables or disables logging to an S3 bucket. To enable logging,
	// select True.
	EnableLogging *bool `pulumi:"enableLogging"`
	// The name of your Glue Data Catalog database.
	GlueCatalogDatabaseName string `pulumi:"glueCatalogDatabaseName"`
	// The maximum number of concurrency scaling Redshift
	// clusters.
	MaxConcurrentCluster *float64 `pulumi:"maxConcurrentCluster"`
	// The email notification list that is used to configure an SNS
	// topic for sending CloudWatch alarm and event notifications.
	NotificationEmail string `pulumi:"notificationEmail"`
	// The number of compute nodes in the cluster. For multi-node
	// clusters, the NumberOfNodes parameter must be greater than
	// 1.
	NumDbNodes *int `pulumi:"numDbNodes"`
	// Specifies whether Amazon Redshift will be publicly accessible.
	// If this option is set to True, the Amazon Redshift cluster will
	// be created in a public subnet with security group whitelisting
	// to RemoteAccessCIDR.
	// If you leave the default option of False, the Amazon Redshift
	// cluster will be created in a private subnet with security group
	// whitelisting to VPCCIDR.
	PubliclyAccessible *bool `pulumi:"publiclyAccessible"`
	// Name for an S3 bucket for logging. An IAM role will be created and
	// associated to the Redshift cluster with GET and LIST access to
	// this bucket.
	RedshiftLoggingS3BucketName *string `pulumi:"redshiftLoggingS3BucketName"`
	// The list of subnet IDs in which to deploy the Redshift Cluster
	SubnetIDs []string `pulumi:"subnetIDs"`
	// The VPC with which to create the Redshift Cluster
	VpcID string `pulumi:"vpcID"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Allowed CIDR block in the format x.x.x.x/x for external SSH
	// access to the cluster.
	DbAccessCidrBlock string
	// The maintenance window for the Redshift cluster. e.g 'sat:05:00-sat:05:30'
	DbMaintenanceWindow *string
	// The password that is associated with the master user account
	// for the cluster that is being created. Must have at least 8
	// characters and no more than 64 characters, and must include 1
	// uppercase letter, 1 lowercase letter, 1 number, and 1 symbol
	// (excluding / @ \" ').
	DbMasterPassword pulumi.StringInput
	// The user name that is associated with the master user account
	// for the cluster that is being created.
	DbMasterUsername string
	// The name of the first database to be created when the cluster
	// is created.
	DbName string
	// The type of node to be provisioned
	DbNodeType string
	// The port number on which the cluster accepts incoming
	// connections. Default is 8200
	DbPort *int
	// Enables or disables logging to an S3 bucket. To enable logging,
	// select True.
	EnableLogging *bool
	// The name of your Glue Data Catalog database.
	GlueCatalogDatabaseName string
	// The maximum number of concurrency scaling Redshift
	// clusters.
	MaxConcurrentCluster *float64
	// The email notification list that is used to configure an SNS
	// topic for sending CloudWatch alarm and event notifications.
	NotificationEmail string
	// The number of compute nodes in the cluster. For multi-node
	// clusters, the NumberOfNodes parameter must be greater than
	// 1.
	NumDbNodes *int
	// Specifies whether Amazon Redshift will be publicly accessible.
	// If this option is set to True, the Amazon Redshift cluster will
	// be created in a public subnet with security group whitelisting
	// to RemoteAccessCIDR.
	// If you leave the default option of False, the Amazon Redshift
	// cluster will be created in a private subnet with security group
	// whitelisting to VPCCIDR.
	PubliclyAccessible *bool
	// Name for an S3 bucket for logging. An IAM role will be created and
	// associated to the Redshift cluster with GET and LIST access to
	// this bucket.
	RedshiftLoggingS3BucketName *string
	// The list of subnet IDs in which to deploy the Redshift Cluster
	SubnetIDs pulumi.StringArrayInput
	// The VPC with which to create the Redshift Cluster
	VpcID pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

type ClusterPtrInput interface {
	pulumi.Input

	ToClusterPtrOutput() ClusterPtrOutput
	ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput
}

type clusterPtrType ClusterArgs

func (*clusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (i *clusterPtrType) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *clusterPtrType) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//          ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//          ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o.ToClusterPtrOutputWithContext(context.Background())
}

func (o ClusterOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cluster) *Cluster {
		return &v
	}).(ClusterPtrOutput)
}

type ClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (o ClusterPtrOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) Elem() ClusterOutput {
	return o.ApplyT(func(v *Cluster) Cluster {
		if v != nil {
			return *v
		}
		var ret Cluster
		return ret
	}).(ClusterOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cluster)(nil))
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].([]Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Cluster)(nil))
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].(map[string]Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
